;;;; Task 7 -- Converge the probability values of the game table
;;

( defmethod converge-random-vs-lookup ( ( gst game-state-table ) ( n integer ) )
  ( setf player1 ( make-instance 'random-machine-player ) )
  ( setf player2 ( make-instance 'table-lookup-player :game-state-table gst ) )
  ( converge player1 player2 gst n )
)

( defmethod converge ( ( player1 player ) ( player2 player ) ( gst game-state-table ) ( n integer ) )
  ( setf analyze nil )
  ( dotimes ( i n ) 
    ( format t  "game ~A: " i )
    ( setf game ( generic-play player1 player2 nil gst ) ) 
    ( if ( equal ( player-name player1 ) 'table-lookup-player ) 
      ( if ( = ( mod ( length ( game-state-list game ) ) 2 ) 0 )
        ( setf analyze t ) 
      )
      ( if ( = ( mod ( length ( game-state-list game ) ) 2 ) 1 )
        ( setf analyze t ) 
      )
    ) 
    ;now to analyze the game
    ( setf training-n 1 )
    ( if ( not ( equal ( game-state-table-state-probability-tuple-list gst ) '() ) )
      ( setf training-n ( ceiling ( / ( state-probability-tuple-hits 
        ( rac ( game-state-table-state-probability-tuple-list gst ) ) ) 100 ) )
      )
    )
    ( if analyze
      ( let ( ( win 0 ) )
        ( dotimes ( j ( - ( length ( game-state-list game ) ) 1 ) )
          ( setf s ( nth j ( game-state-list game ) ) )
          ( insert gst s ( * training-n win ) training-n ) 
          ( if ( = win 1 ) ( setf win 0 ) ( setf win 1 ) )
        )
        ( setf analyze nil )
      )
    )
    ( if ( = ( mod i 10 ) 0 )
      ( let ()
        ( format t "Player Switch~%" )
        ( setf temp player1 )
        ( setf player1 player2 )
        ( setf player2 temp )
        ( write-gst-to-file gst )
      )
    )
  ) 
  ( write-gst-to-file gst )
  ( format t "Final GST: ~%" )
  ( display gst ) 
  gst 
)

( defmethod dobo-demo-7 ( )
  ( setf gst ( make-instance 'game-state-table ) )
  ( format t "GST is empty~%" )
  ( display gst )
  ( format t " converging with 100 games, displaying every 10 games ...~%" )
  ( setf gst ( converge-random-vs-lookup gst 10 ) )
  ( format t "GST after 10 training games ...~%" )
  ( display gst )
  ( setf gst ( converge-random-vs-lookup gst 10 ) )
  ( format t "GST after 20 training games ...~%" )
  ( display gst )
  ( setf gst ( converge-random-vs-lookup gst 10 ) )
  ( format t "GST after 30 training games ...~%" )
  ( display gst )
  ( setf gst ( converge-random-vs-lookup gst 10 ) )
  ( format t "GST after 40 training games ...~%" )
  ( display gst )
  ( setf gst ( converge-random-vs-lookup gst 10 ) )
  ( format t "GST after 50 training games ...~%" )
  ( display gst )
  ( setf gst ( converge-random-vs-lookup gst 10 ) )
  ( format t "GST after 60 training games ...~%" )
  ( display gst )
  ( setf gst ( converge-random-vs-lookup gst 10 ) )
  ( format t "GST after 70 training games ...~%" )
  ( display gst )
  ( setf gst ( converge-random-vs-lookup gst 10 ) )
  ( format t "GST after 80 training games ...~%" )
  ( display gst )
  ( setf gst ( converge-random-vs-lookup gst 10 ) )
  ( format t "GST after 90 training games ...~%" )
  ( display gst )
  ( setf gst ( converge-random-vs-lookup gst 10 ) )
  ( format t "GST after 100 training games ...~%" )
  ( display gst )
)

