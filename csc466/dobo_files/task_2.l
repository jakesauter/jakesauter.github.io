;;;; Task 2 -- Model a Player
; The root of the player hierarchy

( defclass player ()
  ( 
    ( name :accessor player-name :initarg :name :initform 'john-doe ) 
    ( wins :accessor player-wins :initarg :wins :initform 0 )
    ( losses :accessor player-losses :initarg :losses :initform 0 )
  )
)

( defmethod display ( ( p player  ) )
  ( terpri )
  ( format t "Name: ~A~%" ( player-name p ) )
  ( format t "Wins: ~A~%" ( player-wins p ) )
  ( format t "Losses: ~A~%" ( player-losses p ) )
  ( if ( > ( + ( player-wins p ) ( player-losses p ) ) 0 )
    ( let () 
      ( format t "Win Ratio: ~A~%~%" 
        ( float ( / ( player-wins p ) ( + ( player-wins p ) ( player-losses p ) ) ) ) 
      )
    )
    ( format t "Win Ratio: Undetermined~%~%" )
  )
)

( defun dobo-demo-2 (&aux gen-player) 
  ( format t "Making a generic player ...~%" )
  ( setf gen-player ( make-instance 'player ) )
  ( format t "Displaying the generic player ...~%" )
  ( display gen-player )
  ( format t "Changing generic player's name ...~%" )
  ( setf ( player-name gen-player ) 'Billy-Joe ) 
  ( format t "Displaying the generic player ...~%" )
  ( display gen-player )
  ( format t "The player won 5 out of 5 games played and has a perfect win ratio ...~%" )
  ( setf ( player-wins gen-player ) 5 )
  ( format t "Displaying the generic player ...~%" )
  ( display gen-player )
  ( format t "The player lost the next 3 games ...~%" )
  ( setf ( player-losses gen-player ) 3 )
  ( format t "Displaying the generic player ...~%" )
  ( display gen-player )
  gen-player
)
