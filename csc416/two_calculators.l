( defun calculator-LR (&aux input operator1 operandSet1 operandSet2 result)
	( format t "Expression? " )
        ( setf input ( list (read) (read) (read) (read) (read) ) )
	( setf operator1 (second input ) )
	( setf operator2 (nth 3 input ) ) 
	( setf operandSet1 ( list ( first input ) (nth 2 input ) ) )
	( setf operandSet2 (list ( apply operator1 operandSet1 ) (nth 4 input ) ) )
	( setf result ( apply operator2 operandSet2 ) )
	( format t "Result: ~A~%" result )
	(calculator-lr)
)

( defun calculator-RL (&aux input operand1 operator1 operand2 operator2 operand3 subResult result)
	( format t "Expression? " )
	( setf input ( list (read) (read) (read) (read) (read) ) )
	( setf operand1 ( first input ) ) 
	( setf operator1 ( second input ) )
	( setf operand2 ( nth 2 input ) )	
	( setf operator2 ( nth 3 input ) )
	( setf operand3 ( nth 4 input ) )
	( setf subResult ( funcall operator2 operand2 operand3 ) )
	( setf result ( funcall operator1 operand1 subResult ) ) 
	( format t "Result: ~A~%" result )
	( calculator-rl ) 
)


