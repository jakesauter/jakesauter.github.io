(setf lb '( c c c m m m b ) )

( defmethod establish-operators ()
  ( setf move-cm-lr ( make-instance 'operator 'move-cm-lr move-cm-lr-p move-cm-lr-f ) )
  ( setf *operator-list* '( move-cm-lr
              
                           )
  )  
)

( defmethod apply-operator ( ( o operator ) ( s state ) )
  ( funcall o s )  
)

( defmethod move-cm-lr-f ( ( s state ) ) 
  ( remove 'c ( state-left-bank s ) )
  ( remove 'm ( state-left-bank s ) )   
  ( append 'c ( state-right-bank s ) )
  ( append 'b ( state-right-bank s ) )
)

( defmethod move-cm-rl-f ( ( s state ) )
  ( remove 'c ( state-right-bank s ) )
  ( remove 'm ( state-right-bank s ) )
  ( append 'c ( state-left-bank s ) )
  ( append 'm ( state-left-bank s ) )
)

( defmethod move-mm-lr-f ( ( s state ) )
  ( remove 'm ( state-left-bank s ) )
  ( remove 'm ( state-left-bank s ) )
  ( append 'm ( state-right-bank s ) )
  ( append 'm ( state-right-bank s ) )
)

( defmethod move-mm-rl-f ( ( s state ) )
  ( remove 'm ( state-right-bank s ) )
  ( remove 'm ( state-right-bank s ) )
  ( append 'm ( state-left-bank s ) )
  ( append 'm ( state-left-bank s ) )
)

( defmethod move-cc-lr-f ( ( s state ) )
  ( remove 'c ( state-left-bank s ) )
  ( remove 'c ( state-left-bank s ) )
  ( append 'c ( state-right-bank s ) )
  ( append 'c ( state-right-bank s ) )
)

( defmethod move-cc-rl-f ( ( s state ) )
  ( remove 'c ( state-right-bank s ) )
  ( remove 'c ( state-right-bank s ) )
  ( append 'c ( state-left-bank s ) )
  ( append 'c ( state-left-bank s ) )
)

( defmethod move-m-lr-f ( ( s state ) )
  ( remove 'm ( state-left-bank s ) )
  ( append 'm ( state-right-bank s ) )
)

( defmethod move-m-rl-f ( ( s state ) )
  ( remove 'm ( state-right-bank s ) )
  ( append 'm ( state-left-bank s ) )
)

( defmethod move-c-lr-f ( ( s state ) )
  ( remove 'c ( state-left-bank s ) ) 
  ( append 'c ( state-right-bank s ) )
)

( defmethod move-c-rl-f ( ( s state ) )
  ( remove 'c ( state-right-bank s ) )
  ( append 'c ( state-left-bank s ) )
) 

